import java.util.*;

class Query {
    String name;
    int timeRemaining;

    public Query(String name, int time) {
        this.name = name;
        this.timeRemaining = time;
    }
}

public class OnlineQueryHandlingSystem {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        Queue<Query> studentQueue = new LinkedList<>();
        Queue<Query> facultyQueue = new LinkedList<>();

        System.out.print("Enter the number of student queries: ");
        int numStudentQueries = input.nextInt();
        for (int i = 1; i <= numStudentQueries; i++) {
            System.out.print("Enter the time required for Student " + i + " (in minutes): ");
            int time = input.nextInt();
            studentQueue.add(new Query("Student " + i, time));
        }

        System.out.print("Enter the number of faculty queries: ");
        int numFacultyQueries = input.nextInt();
        for (int i = 1; i <= numFacultyQueries; i++) {
            System.out.print("Enter the time required for Faculty " + i + " (in minutes): ");
            int time = input.nextInt();
            facultyQueue.add(new Query("Faculty " + i, time));
        }

        int currentTime = 0;
        int totalTime = 0;
        int totalQueries = numStudentQueries + numFacultyQueries;
        int timeSlice = 5; // Assuming each query gets 5 minutes of time

        while (currentTime < 120 && (studentQueue.size() > 0 || facultyQueue.size() > 0)) {
            if (studentQueue.size() > 0) {
                Query currentQuery = studentQueue.peek();
                if (currentQuery.timeRemaining > timeSlice) {
                    currentQuery.timeRemaining -= timeSlice;
                    currentTime += timeSlice;
                } else {
                    studentQueue.remove();
                    totalTime += currentTime + currentQuery.timeRemaining;
                    currentTime += currentQuery.timeRemaining;
                }
            } else {
                Query currentQuery = facultyQueue.peek();
                if (currentQuery.timeRemaining > timeSlice) {
                    currentQuery.timeRemaining -= timeSlice;
                    currentTime += timeSlice;
                } else {
                    facultyQueue.remove();
                    totalTime += currentTime + currentQuery.timeRemaining;
                    currentTime += currentQuery.timeRemaining;
                }
            }
            // Round-robin scheduling
            if (studentQueue.size() > 0 && facultyQueue.size() > 0) {
                Query currentQuery = studentQueue.peek();
                if (currentQuery.timeRemaining > facultyQueue.peek().timeRemaining) {
                    currentQuery = facultyQueue.peek();
                }
                if (currentQuery.timeRemaining > timeSlice) {
                    currentQuery.timeRemaining -= timeSlice;
                    currentTime += timeSlice;
                } else if (currentQuery == studentQueue.peek()) {
                    studentQueue.remove();
                    totalTime += currentTime + currentQuery.timeRemaining;
                    currentTime += currentQuery.timeRemaining;
                } else {
                    facultyQueue.remove();
                    totalTime += currentTime + currentQuery.timeRemaining;
                    currentTime += currentQuery.timeRemaining;
                }
            }
        }
        double avgQueryTime = (double) totalTime / totalQueries;
        System.out.println("Total time spent on handling queries: " + totalTime + " minutes");
        System.out.println("Average query time: " + avgQueryTime + " minutes");
    }
}
